#!/bin/bash

# Path to original gh binary
ORIGINAL_GH="/c/Program Files/GitHub CLI/gh"

# Get current repository's remote URL
remote_url=$(git remote get-url origin 2>/dev/null)

# If not in a git repo, pass through to original gh
if [ $? -ne 0 ]; then
    exec "$ORIGINAL_GH" "$@"
fi

# Extract full repository name (owner/repo) - remove .git suffix
if [[ $remote_url =~ github\.com[:/]([^/]+/[^/]+) ]]; then
    repo_full_name="${BASH_REMATCH[1]}"
    repo_full_name="${repo_full_name%.git}"
    repo_owner=$(echo "$repo_full_name" | cut -d'/' -f1)
else
    exec "$ORIGINAL_GH" "$@"
fi

# Get current active GitHub account
current_user=$("$ORIGINAL_GH" api user --jq '.login' 2>/dev/null)

if [ $? -ne 0 ]; then
    exec "$ORIGINAL_GH" "$@"
fi

# Switch account if needed
if [ "$repo_owner" != "$current_user" ]; then
    echo "→ Repository belongs to $repo_owner, switching from $current_user..." >&2
    # try to switch directly to the account matching the repo owner; don't fail the script if it doesn't succeed
    "$ORIGINAL_GH" auth switch "$repo_owner" >/dev/null 2>&1 || true

    # wait briefly for gh to refresh auth context (up to 5 seconds)
    tries=0
    until "$ORIGINAL_GH" api user --jq '.login' >/dev/null 2>&1 || [ "$tries" -ge 5 ]; do
        sleep 1
        tries=$((tries+1))
    done
fi

# Only set default if repo is accessible with current auth
if "$ORIGINAL_GH" repo view "$repo_full_name" >/dev/null 2>&1; then
    "$ORIGINAL_GH" repo set-default "$repo_full_name" >/dev/null 2>&1
else
    echo "→ Warning: $repo_full_name not accessible with current auth, skipping repo set-default" >&2
fi

# Execute original command
exec "$ORIGINAL_GH" "$@"

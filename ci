#!/bin/bash

# Check if the optional parameter for staged changes is provided
if [ "$1" == "--cached" ]; then
  git_diff="git diff -w -b --cached"
  commit_command="git commit -m"
else
  git_diff="git diff -w -b HEAD"
  commit_command="git commit -am"
fi

# Get git changes
changes=$($git_diff 2>/dev/null)

if [ -z "$changes" ]; then
  echo "No changes to commit."
  exit 0
fi

prompt=$(cat <<-END
Analyze the following code changes and generate a concise, meaningful git commit message that:

0. Ignore changes that only contain space changes
1. Summarizes the main purpose or impact of the changes
2. Is no longer than 100 characters (150 characters maximum if absolutely necessary)
3. Uses present tense and imperative mood (e.g., "Add feature" not "Added feature")
4. Focuses on the "what" and "why" rather than the "how"

Provide ONLY the commit message itself, without any additional text, explanations, or formatting.

Code changes:

PROVIDE ONLY THE COMMIT MESSAGE ITSELF, WITHOUT ANY ADDITIONAL TEXT, EXPLANATIONS, OR FORMATTING.
Code changes:
END
)

prompt+="$changes"

# Build JSON request body using jq for Groq API
groq_model="llama-3.1-70b-versatile"
groq_max_tokens=8000
if [ "$(basename "$0")" == "cib" ]; then
  groq_model="mixtral-8x7b-32768"
  groq_max_tokens=32768
fi
groq_request_body=$(jq -n --arg model "$groq_model" --arg prompt "$prompt"  --argjson max_tokens "$groq_max_tokens"\
  '{model: $model, messages: [{role:"system",content:"You are a programmer"},{role: "user", content: $prompt}], max_tokens: $max_tokens, stream: false, temperature: 0, top_p: 1, stop: null}')


# Build JSON request body using jq for OpenAI API
openai_request_body=$(jq -n --arg model "gpt-4o-mini" --arg prompt "$prompt" \
  '{model: $model, messages: [{role:"system",content:"You are a programmer"},{role: "user", content: $prompt}], max_tokens: 16384, temperature: 0}')

# Function to get commit message from Groq API
get_commit_message_groq() {
  response=$(curl -s --request POST \
    --url https://api.groq.com/openai/v1/chat/completions \
    --header "Authorization: Bearer $GROQ_API_KEY" \
    --header "Content-Type: application/json" \
    --data "$groq_request_body")
  echo $response
}

# Function to get commit message from OpenAI API
get_commit_message_openai() {
  response=$(curl -s --request POST \
    --url https://api.openai.com/v1/chat/completions \
    --header "Authorization: Bearer $OPENAI_API_KEY" \
    --header "Content-Type: application/json" \
    --data "$openai_request_body")
  echo $response
}

# Try OPENAI API first
response=$(get_commit_message_openai)
commit_message=$(echo "$response" | jq -r '.choices[0].message.content')
api_used="OPENAI API"

# If OPENAI API fails due to rate limit, try GROQ API
if [[ -z "$commit_message" || "$commit_message" == "null" || "$commit_message" =~ "Rate limit reached|parse error" ]]; then
  echo $response
  response=$(get_commit_message_groq)
  commit_message=$(echo "$response" | jq -r '.choices[0].message.content')
  api_used="GROQ API"
fi

# Exit if the commit message is empty
if [ -z "$commit_message" ] || [ "$commit_message" == "null" ]; then
  echo 'Failed to generate a commit message:'
  echo $response
  exit 1
fi

# get current branch name
branch_name=$(git rev-parse --abbrev-ref HEAD)

# get ticket number from branch name
ticket_number=$(echo "$branch_name" | grep -oEi 'mt-[0-9]+' | tr 'a-z' 'A-Z')

# put the ticket number as a prefix
commit_message="$ticket_number $commit_message"
commit_message=$(echo "$commit_message"|sed 's/\\_/_/g'|sed 's/"//g')

# Create temporary file for editing
temp_file=$(mktemp)
echo "$commit_message" > "$temp_file"

# Print initial API information
echo " $api_used generates:"
echo ""

while true; do
    # Show current message
    echo ""
    echo "$commit_message"
    echo ""
    echo ""

    # Show options and get user input
    echo " Enter to commit, 'e' to edit in Vim, Ctrl+C to cancel"
    echo ""
    read -n 1 -p " Your choice: " choice
    echo ""

    if [ "$choice" = "e" ]; then
        # Open message in vim
        vim "$temp_file"

        # Read edited message
        commit_message=$(cat "$temp_file")
        echo ""
    elif [ -n "$choice" ]; then
        # If any other key was pressed (except Enter), exit
        echo "Invalid choice. Please try again."
        echo ""
        continue
    else
        # Enter was pressed, break the loop to proceed with commit
        break
    fi
done

# Clean up temp file
rm "$temp_file"

# Commit changes
$commit_command "$commit_message"
